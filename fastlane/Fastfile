# Define the minimal Fastlane version
fastlane_version "1.98.0"

# Use the iOS platform as default
default_platform :ios

# Define what to do for the iOS platform
platform :ios do

	# Run this before doing anything else
	before_all do

	  # If the GIT status is not clean, abort. We won't want to include junk in the build
	end

	# After all the steps have completed succesfully, run this.
	after_all do |lane|

	end

	# If there was an error, run this
	error do |lane, exception|

	end

	private_lane :build_app do |options|

	  # Build the app
	  gym(
	  	use_legacy_build_api: options[:use_legacy_build_api],
	  	workspace: "#{ENV['WORKSPACE']}",
	  	configuration: options[:configuration],
	    scheme: "#{ENV['SCHEME']}",
	    #provisioning_profile_path: options[:profile],
	    #codesigning_identity: options[:codesigning_identity],
	    export_method: options[:export_method],
	    silent: options[:silent],
	    clean: options[:clean],
	    output_directory: options[:output_directory],
	    output_name: options[:output_name],
	    sdk: options[:sdk]
	  )

	end

	# Publish to Testflight
	private_lane :publish_testflight do |options|

	  # Generate a changelog with GIT since the last successful build in Jenkins
	  changelog = sh("git log --graph --pretty=format:'%h -%d %s <%an>' --abbrev-commit #{ENV['GIT_PREVIOUS_SUCCESSFUL_COMMIT'] || 'HEAD^^^^^'}..HEAD")

	  # Send the app to Testflight
	  pilot(
	    changelog: "#{changelog.to_s}"
	  )
	end

	# Publish to Hockeyapp
	private_lane :publish_hockey do |options|

	  # Generate a changelog with GIT since the last successful build in Jenkins
	  changelog = sh("git log --graph --pretty=format:'%h -%d %s <%an>' --abbrev-commit #{ENV['GIT_PREVIOUS_SUCCESSFUL_COMMIT'] || 'HEAD^^^^^'}..HEAD")

	  # Send the app to Hockeyapp (fill in your API token!)
	  #hockey(
	  # api_token: "<your api token here>",
	  #notes: "#{changelog.to_s}",
	  #release_type: options[:release_type]
	  #)
	end

	# Publish to the AppStore
	private_lane :publish_appstore do |options|
	  deliver(force: true)
	  # add device frames to send them to the customer
	  frameit
	end

	desc "Returns a default changelog."
	  lane :default_changelog do
	    changelog = changelog_from_git_commits(
	        between: [ENV['GIT_PREVIOUS_SUCCESSFUL_COMMIT'] || "HEAD^^^^^", "HEAD"],
	        pretty: "- %s"
	    )
	    # HAX: strip emoji from changelog
	    changelog = changelog.sub(/[\u{1F300}-\u{1F6FF}]/, '')
	    Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog
	    puts changelog
	    changelog
  	end

	 desc "compiles, code signs, and buildsthe app, this option is the developer's defualt choice to build normally"
	 lane :build do |options|
	 	puts "------------- Alpha build for App: #{ENV['APP_NAME']} -------------"

	 	# force iTunes file sharing to be enabled (normally disabled for release builds)
	    ENV['WMF_FORCE_ITUNES_FILE_SHARING'] = '1'
	    # force debug menu to be shown
	    ENV['WMF_FORCE_DEBUG_MENU'] = '1'

		# Build App
	  	build_app(
		    release:false,
		    configuration: "AdHoc", #alpha
		    use_legacy_build_api: true,
		    adhoc: true,
		    # Fastlane has issues forcing AdHoc profiles
		    force: false,
		    sdk: "iphoneos",
		    project_name:"#{ENV['PROJECT_NAME']}",
		    app_name: "#{ENV['APP_NAME']}",
		    app_identifier:"#{ENV['APP_IDENTIFIER']}",
		    export_method: 'ad-hoc',
		    silent: false,
		  	clean: true,
		    output_directory: "build/targets/#{ENV['APP_NAME']}",
		  	output_name: "#{ENV['PRODUCT_NAME']}-alpha.ipa"
	    )
	  	changelog = default_changelog
	  	# Make sure our directory is clean, except for changes Fastlane has made
	  	# clean_build_artifacts
		
  	end


  	desc "Submit a new Beta Build to Apple TestFlight"
	lane :beta do |options|
	  	puts "------------- Alpha build for App: #{ENV['APP_NAME']} -------------"
	  	# You'll probably want to commit this change before running a beta build
	  	ensure_git_status_clean

	 	# force iTunes file sharing to be enabled (normally disabled for release builds)
	    ENV['WMF_FORCE_ITUNES_FILE_SHARING'] = '1'
	    # force debug menu to be shown
	    ENV['WMF_FORCE_DEBUG_MENU'] = '1'

	    match(type: "development") #You can now run `match development`, `match adhoc` and `match appstore`

		# Bump build number
		increment_build_number  
		build_number = Actions.lane_context[Actions::SharedValues::BUILD_NUMBER]

		# Set version number to the one at the top of the CHANGELOG
		changelog = default_changelog
  		readme = changelog
  		latest_version = readme.split("\n## ").first
  		first_line = latest_version.split("\n").first
  		version_number = first_line.split(" ")[1]

  		increment_version_number version_number: version_number
  		puts "The Version after increment  is #{version_number} Build: #{build_number}"
		# Generate release notes from CHANGELOG
  		release_notes = latest_version.split("\n")[1..-1].join("\n")

		# Get date and format
		date_version = Time.new
        date_version = date_version.strftime("%Y.%m.%d")

        set_info_plist_value(
        	path: "Stappy2/Customer/#{ENV['APP_NAME']}/Supporting Files/#{ENV['APP_NAME']}.plist", 
        	key: "CFBundleVersion", 
        	value: "#{date_version} (#{build_number})"
        )
        #set_info_plist_value(path: "#{options[:project_name]}/Customer/#{options[:app_name]}/Supporting Files/#{options[:app_name]}.plist", key: "CFBundleVersion", value: "#{date_version} (#{build_number})")
  		# Build App
	  	# Build App
	  	build_app(
		    release:false,
		    configuration: "Beta",
		    use_legacy_build_api: true,
		    sdk: "iphoneos",
		    project_name:"#{ENV['PROJECT_NAME']}",
		    app_name: "#{ENV['APP_NAME']}",
		    app_identifier:"#{ENV['APP_IDENTIFIER']}",
		    export_method: 'enterprise',
		    silent: true,
		  	clean: true,
		    output_directory: "build/targets/#{ENV['APP_NAME']}",
		  	output_name: "#{ENV['PRODUCT_NAME']}-alpha.ipa"
	    )

	    commit_version_bump({
			xcodeproj: "Stappy2.xcodeproj", 
			message: "Deploying version #{version_number}.",
			force: true
		})

		puts "The NEW Version is #{version_number} Build: #{build_number}"
	    # version_number = Actions.lane_context[Actions::SharedValues::VERSION_NUMBER]
	    version_number = "#{get_version_number}.#{get_build_number}"
    	badge(shield: "Version-#{version_number}-blue")	

		add_git_tag(
		   tag: "build/#{version_number}"
		)

		push_to_git_remote(
		    remote: 'origin_new'         # optional, default: 'origin'
		    #local_branch: 'develop',  # optional, aliased by 'branch', default: 'master'
		    #remote_branch: 'develop'  # optional, default is set to local_branch
		)

	   # Reset git repo for fastlane xml files
	   #reset_git_repo(
		# force: true
	   #)
	end


  end