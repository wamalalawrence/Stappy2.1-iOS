# Define the minimal Fastlane version
fastlane_version "1.98.0"

# Use the iOS platform as default
default_platform :ios

# Define what to do for the iOS platform
platform :ios do

	# Run this before doing anything else
	before_all do

	  # If the GIT status is not clean, abort. We won't want to include junk in the build
	  ensure_git_status_clean

	end

	# After all the steps have completed succesfully, run this.
	after_all do |lane|

	  # Remove all build artifacts, but keep mobileprovisioning profiles since they are stored in GIT
	  #clean_build_artifacts(
	  #  exclude_pattern: ".*\.mobileprovision"
	  #)

	  # Reset all changes to the git checkout
	  #reset_git_repo(
	  #  force: true
	  #)

	  #slack(
	  #	   message: "App was successfully released!",
	  #   success: true
	  # )

	end

	# If there was an error, run this
	error do |lane, exception|

	  # Remove all build artifacts, but keep mobileprovisioning profiles since they are stored in GIT
	  #clean_build_artifacts(
	   # exclude_pattern: ".*\.mobileprovision"
	  #)

	  # Reset all changes to the git checkout
	  #reset_git_repo(
	  #  force: true
	  #)

	   #slack(
		#   message: "An error occured while deploying the app",
		 #  success: false
	   #)

	end

	private_lane :build_app do |options|

	  # This part is done only when the app is not for the "production" environment
	  if not options[:release]
	    # Add the build number to the icon
	    build_number_icon
	  end

	  # Update the app name
	  #app_name(
	  #	app_name: options[:app_name],
	  # plist_path: "#{options[:project_name]}/Customer/#{options[:app_name]}/Supporting Files/#{options[:app_name]}.plist"
	  #)

	  # Update the app identifier
	  #update_app_identifier(
	    # xcodeproj: "#{options[:project_name]}.xcodeproj",
	   # plist_path: "#{options[:project_name]}/Customer/#{options[:app_name]}/Supporting Files/#{options[:app_name]}.plist",
	    #app_identifier: options[:app_identifier]
	  #)

	  # Version bump
	  increment_build_number(
	    build_number: options[:build_number]
	    # set_info_plist_value(path: "#{options[:project_name]}/Customer/#{options[:app_name]}/Supporting Files/#{options[:app_name]}.plist", key: "CFBundleVersion", value: "#{build_version}")
	  )

	  # Install the certificate
	  import_certificate(
	    certificate_path: options[:certificate_path],
	    certificate_password: options[:certificate_password],
	    keychain_name: "login.keychain"
	  )

	  # Install the provisioning profile
	  update_project_provisioning(
	    # xcodeproj: "#{options[:project_name]}.xcworkspace",
	    profile: options[:profile]
	  )

	  # Build the app
	  gym(
	  	use_legacy_build_api: options[:use_legacy_build_api],
	    scheme: "#{options[:scheme]}",
	    configuration: options[:configuration],
	    provisioning_profile_path: options[:profile],
	    codesigning_identity: options[:codesigning_identity],
	    export_method: options[:export_method],
	    silent: options[:silent],
	    clean: options[:clean],
	    output_directory: options[:output_directory],
	    output_name: options[:output_name],
	    sdk: options[:sdk]
	  )

	end

	# Publish to Testflight
	private_lane :publish_testflight do |options|

	  # Generate a changelog with GIT since the last successful build in Jenkins
	  changelog = sh("git log --graph --pretty=format:'%h -%d %s <%an>' --abbrev-commit #{ENV['GIT_PREVIOUS_SUCCESSFUL_COMMIT'] || 'HEAD^^^^^'}..HEAD")

	  # Send the app to Testflight
	  pilot(
	    changelog: "#{changelog.to_s}"
	  )
	end

	# Publish to Hockeyapp
	private_lane :publish_hockey do |options|

	  # Generate a changelog with GIT since the last successful build in Jenkins
	  changelog = sh("git log --graph --pretty=format:'%h -%d %s <%an>' --abbrev-commit #{ENV['GIT_PREVIOUS_SUCCESSFUL_COMMIT'] || 'HEAD^^^^^'}..HEAD")

	  # Send the app to Hockeyapp (fill in your API token!)
	  #hockey(
	  # api_token: "<your api token here>",
	  #notes: "#{changelog.to_s}",
	  #release_type: options[:release_type]
	  #)
	end

	# Publish to the AppStore
	private_lane :publish_appstore do |options|
	  deliver(force: true)
	  # add device frames to send them to the customer
	  frameit
	end

	desc "Returns a default changelog."
	  lane :default_changelog do
	    changelog = changelog_from_git_commits(
	        between: [ENV['GIT_PREVIOUS_SUCCESSFUL_COMMIT'] || "HEAD^^^^^", "HEAD"],
	        pretty: "- %s"
	    )
	    # HAX: strip emoji from changelog
	    changelog = changelog.sub(/[\u{1F300}-\u{1F6FF}]/, '')
	    Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog
	    puts changelog
	    changelog
  	end

	 desc "compiles, code signs, and buildsthe app, this option is the developer's defualt choice to build normally"
	 lane :dev do |options|
	 	puts "------------- Alpha build for App: #{options[:app_name]} Schema: #{options[:target]}-------------"

	 	# force iTunes file sharing to be enabled (normally disabled for release builds)
	    ENV['WMF_FORCE_ITUNES_FILE_SHARING'] = '1'
	    # force debug menu to be shown
	    ENV['WMF_FORCE_DEBUG_MENU'] = '1'

	  	build_app(
		    release:false,
		    configuration: "AdHoc", #alpha
		    use_legacy_build_api: true,
		    adhoc: true,
		    # Fastlane has issues forcing AdHoc profiles
		    force: false,
		    sdk: "iphoneos",
		    project_name:"Stappy2",
		    # app_name: "#{options[:app_name]}",
		    app_identifier:"#{ENV['APP_IDENTIFIER']}",
		    certificate_path:"./fastlane/meta-data/targets/#{options[:target]}/certs/Certificate_enten_develop.p12",
		    certificate_password:"",
		    profile:"./fastlane/meta-data/targets/#{options[:target]}/certs/Entenhousen_development_push_test.mobileprovision",
		    scheme:"#{options[:target]}",
		    export_method: 'ad-hoc',
		    silent: false,
		  	clean: true,
		    output_directory: "build/targets/#{options[:target]}",
		  	output_name: "#{options[:target]}-alpha.ipa"
	    )
	  	changelog = default_changelog
		
  	end
  end